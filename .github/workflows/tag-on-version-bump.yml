name: Tag on Version Bump

on:
  push:
    paths:
      - '**/gradle.properties'

jobs:
  tag-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for diff and tags

      - name: Detect changed gradle.properties files
        id: detect_files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'gradle.properties$' || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No gradle.properties changes detected."
            exit 0
          fi
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Tag modules with updated versions
        if: steps.detect_files.outputs.files != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          while read FILE; do
            [ -z "$FILE" ] && continue

            # Determine module name from path
            DIR=$(dirname "$FILE")
            if [ "$DIR" = "." ]; then
              MODULE="root"
            else
              MODULE=$(echo "$DIR" | tr '/' '-')
            fi

            # Extract old and new versions
            OLD_VERSION=$(git show ${{ github.event.before }}:"$FILE" 2>/dev/null | grep '^version=' | cut -d'=' -f2 || true)
            NEW_VERSION=$(grep '^version=' "$FILE" | cut -d'=' -f2 || true)

            # Skip if no version change
            if [ "$OLD_VERSION" = "$NEW_VERSION" ] || [ -z "$NEW_VERSION" ]; then
              echo "[$MODULE] Version unchanged (still $NEW_VERSION), skipping."
              continue
            fi

            TAG="${MODULE}/v${NEW_VERSION}"

            # Skip if tag already exists
            if git rev-parse "$TAG" >/dev/null 2>&1; then
              echo "[$MODULE] Tag $TAG already exists, skipping."
              continue
            fi

            echo "[$MODULE] Tagging new version: $OLD_VERSION â†’ $NEW_VERSION"
            git tag "$TAG"
            git push origin "$TAG"

          done < <(echo "${{ steps.detect_files.outputs.files }}")